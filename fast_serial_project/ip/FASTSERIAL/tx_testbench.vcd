$version Generated by VerilatedVcd $end
$date Tue Apr  2 11:39:38 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 - i_clk $end
  $var wire  1 . i_fscts $end
  $var wire  1 0 o_fsclk $end
  $var wire  1 / o_fsdi $end
  $scope module tx_testbench $end
   $var wire 32 1 TX_COUNT [31:0] $end
   $var wire  1 * fsclk $end
   $var wire  1 - i_clk $end
   $var wire  1 . i_fscts $end
   $var wire  1 0 o_fsclk $end
   $var wire  1 / o_fsdi $end
   $var wire  1 & tx_busy $end
   $var wire  8 # tx_data [7:0] $end
   $var wire  1 $ tx_write $end
   $var wire  8 % tx_write_count [7:0] $end
   $scope module clock_for_fastserial $end
    $var wire  1 * fsclk $end
    $var wire  1 - i_clk $end
    $var wire  1 * o_fsclk $end
   $upscope $end
   $scope module tx_lite $end
    $var wire  4 > BIT_DEST [3:0] $end
    $var wire  4 ; BIT_FIVE [3:0] $end
    $var wire  4 : BIT_FOUR [3:0] $end
    $var wire  4 7 BIT_ONE [3:0] $end
    $var wire  4 = BIT_SEVEN [3:0] $end
    $var wire  4 < BIT_SIX [3:0] $end
    $var wire  4 9 BIT_THREE [3:0] $end
    $var wire  4 8 BIT_TWO [3:0] $end
    $var wire  4 6 BIT_ZERO [3:0] $end
    $var wire  2 2 CLOCKS_PER [1:0] $end
    $var wire  1 3 DEST_PORT [0:0] $end
    $var wire  4 ? DONE [3:0] $end
    $var wire  4 @ IDLE [3:0] $end
    $var wire  4 4 START [3:0] $end
    $var wire  4 5 WAIT_FOR_FCTS [3:0] $end
    $var wire  1 & busy $end
    $var wire  1 + d_fscts $end
    $var wire  1 ) fsdi $end
    $var wire  1 - i_clk $end
    $var wire  8 # i_data [7:0] $end
    $var wire  1 * i_fsclk $end
    $var wire  1 . i_fscts $end
    $var wire  1 $ i_write $end
    $var wire  8 ( lcl_data [7:0] $end
    $var wire  1 & o_busy $end
    $var wire  1 / o_fsdi $end
    $var wire  1 , q_fscts $end
    $var wire  4 ' state [3:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#8
b00110000 #
0$
b00000000 %
0&
b1111 '
b11111111 (
1)
0*
0+
0,
0-
1.
1/
00
b00000000000000000000000000000001 1
b10 2
13
b0000 4
b0001 5
b0010 6
b0011 7
b0100 8
b0101 9
b0110 :
b0111 ;
b1000 <
b1001 =
b1010 >
b1011 ?
b1111 @
#10
1$
b00000001 %
1*
1-
10
#15
0-
#18
#20
1&
b0000 '
b00110000 (
0*
1+
1-
00
#25
0-
#28
#30
1*
1-
10
#35
0-
#38
#40
0*
1,
1-
00
#45
0-
#48
#50
1*
1-
10
#55
0-
#58
#60
b0001 '
0)
0*
1-
0/
00
#65
0-
#68
#70
1*
1-
10
#75
0-
#78
#80
0*
0+
1-
0.
00
#85
0-
#88
#90
1*
1-
10
#95
0-
#98
#100
0*
0,
1-
00
#105
0-
#108
#110
1*
1-
10
#115
0-
#118
#120
b0010 '
0*
1-
00
#125
0-
#128
#130
1*
1-
10
#135
0-
#138
#140
b0011 '
b10011000 (
0*
1-
00
#145
0-
#148
#150
1*
1-
10
#155
0-
#158
#160
b0100 '
b11001100 (
0*
1-
00
#165
0-
#168
#170
1*
1-
10
#175
0-
#178
#180
b0101 '
b11100110 (
0*
1-
00
#185
0-
#188
#190
1*
1-
10
#195
0-
#198
#200
b0110 '
b11110011 (
0*
1-
00
#205
0-
#208
#210
1*
1-
10
#215
0-
#218
#220
b0111 '
b11111001 (
1)
0*
1-
1/
00
#225
0-
#228
#230
1*
1-
10
#235
0-
#238
#240
b1000 '
b11111100 (
0*
1-
00
#245
0-
#248
#250
1*
1-
10
#255
0-
#258
#260
b1001 '
b11111110 (
0)
0*
1-
0/
00
#265
0-
#268
#270
1*
1-
10
#275
0-
#278
#280
b1010 '
b11111111 (
0*
1-
00
#285
0-
#288
#290
b1011 '
1)
1*
1-
1/
10
#295
0-
#298
#300
0&
b1111 '
0*
1-
00
#305
0-
#308
#310
1&
b0000 '
b00110000 (
1*
1-
10
#315
0-
#318
#320
0*
1-
00
#325
0-
