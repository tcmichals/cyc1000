// avalonBus_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module avalonBus_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                             //                                           clk_0_clk.clk
		input  wire        packets_to_master_0_clk_reset_reset_bridge_in_reset_reset, // packets_to_master_0_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0] packets_to_master_0_avalon_master_address,                 //                   packets_to_master_0_avalon_master.address
		output wire        packets_to_master_0_avalon_master_waitrequest,             //                                                    .waitrequest
		input  wire [3:0]  packets_to_master_0_avalon_master_byteenable,              //                                                    .byteenable
		input  wire        packets_to_master_0_avalon_master_read,                    //                                                    .read
		output wire [31:0] packets_to_master_0_avalon_master_readdata,                //                                                    .readdata
		output wire        packets_to_master_0_avalon_master_readdatavalid,           //                                                    .readdatavalid
		input  wire        packets_to_master_0_avalon_master_write,                   //                                                    .write
		input  wire [31:0] packets_to_master_0_avalon_master_writedata,               //                                                    .writedata
		output wire [3:0]  ap102_led_0_avs_s0_address,                                //                                  ap102_led_0_avs_s0.address
		output wire        ap102_led_0_avs_s0_write,                                  //                                                    .write
		output wire [31:0] ap102_led_0_avs_s0_writedata,                              //                                                    .writedata
		input  wire        ap102_led_0_avs_s0_waitrequest,                            //                                                    .waitrequest
		output wire [1:0]  gpio_led_0_avs_slave_address,                              //                                gpio_led_0_avs_slave.address
		output wire        gpio_led_0_avs_slave_write,                                //                                                    .write
		output wire [31:0] gpio_led_0_avs_slave_writedata,                            //                                                    .writedata
		input  wire        gpio_led_0_avs_slave_waitrequest,                          //                                                    .waitrequest
		output wire [2:0]  pwm_decoder_0_avs_s0_address,                              //                                pwm_decoder_0_avs_s0.address
		output wire        pwm_decoder_0_avs_s0_write,                                //                                                    .write
		output wire        pwm_decoder_0_avs_s0_read,                                 //                                                    .read
		input  wire [31:0] pwm_decoder_0_avs_s0_readdata,                             //                                                    .readdata
		output wire [31:0] pwm_decoder_0_avs_s0_writedata,                            //                                                    .writedata
		input  wire        pwm_decoder_0_avs_s0_waitrequest,                          //                                                    .waitrequest
		output wire [2:0]  pwm_dshot_0_avs_s0_address,                                //                                  pwm_dshot_0_avs_s0.address
		output wire        pwm_dshot_0_avs_s0_write,                                  //                                                    .write
		output wire [31:0] pwm_dshot_0_avs_s0_writedata,                              //                                                    .writedata
		input  wire        pwm_dshot_0_avs_s0_waitrequest,                            //                                                    .waitrequest
		output wire        pwm_dshot_0_avs_s0_chipselect,                             //                                                    .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,                        //                          sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,                       //                                                    .readdata
		output wire [2:0]  timer_0_s1_address,                                        //                                          timer_0_s1.address
		output wire        timer_0_s1_write,                                          //                                                    .write
		input  wire [15:0] timer_0_s1_readdata,                                       //                                                    .readdata
		output wire [15:0] timer_0_s1_writedata,                                      //                                                    .writedata
		output wire        timer_0_s1_chipselect                                      //                                                    .chipselect
	);

	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest;   // packets_to_master_0_avalon_master_agent:av_waitrequest -> packets_to_master_0_avalon_master_translator:uav_waitrequest
	wire   [31:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdata;      // packets_to_master_0_avalon_master_agent:av_readdata -> packets_to_master_0_avalon_master_translator:uav_readdata
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess;   // packets_to_master_0_avalon_master_translator:uav_debugaccess -> packets_to_master_0_avalon_master_agent:av_debugaccess
	wire   [31:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_address;       // packets_to_master_0_avalon_master_translator:uav_address -> packets_to_master_0_avalon_master_agent:av_address
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_read;          // packets_to_master_0_avalon_master_translator:uav_read -> packets_to_master_0_avalon_master_agent:av_read
	wire    [3:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_byteenable;    // packets_to_master_0_avalon_master_translator:uav_byteenable -> packets_to_master_0_avalon_master_agent:av_byteenable
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid; // packets_to_master_0_avalon_master_agent:av_readdatavalid -> packets_to_master_0_avalon_master_translator:uav_readdatavalid
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_lock;          // packets_to_master_0_avalon_master_translator:uav_lock -> packets_to_master_0_avalon_master_agent:av_lock
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_write;         // packets_to_master_0_avalon_master_translator:uav_write -> packets_to_master_0_avalon_master_agent:av_write
	wire   [31:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_writedata;     // packets_to_master_0_avalon_master_translator:uav_writedata -> packets_to_master_0_avalon_master_agent:av_writedata
	wire    [2:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_burstcount;    // packets_to_master_0_avalon_master_translator:uav_burstcount -> packets_to_master_0_avalon_master_agent:av_burstcount
	wire   [31:0] ap102_led_0_avs_s0_agent_m0_readdata;                                                 // ap102_led_0_avs_s0_translator:uav_readdata -> ap102_led_0_avs_s0_agent:m0_readdata
	wire          ap102_led_0_avs_s0_agent_m0_waitrequest;                                              // ap102_led_0_avs_s0_translator:uav_waitrequest -> ap102_led_0_avs_s0_agent:m0_waitrequest
	wire          ap102_led_0_avs_s0_agent_m0_debugaccess;                                              // ap102_led_0_avs_s0_agent:m0_debugaccess -> ap102_led_0_avs_s0_translator:uav_debugaccess
	wire   [31:0] ap102_led_0_avs_s0_agent_m0_address;                                                  // ap102_led_0_avs_s0_agent:m0_address -> ap102_led_0_avs_s0_translator:uav_address
	wire    [3:0] ap102_led_0_avs_s0_agent_m0_byteenable;                                               // ap102_led_0_avs_s0_agent:m0_byteenable -> ap102_led_0_avs_s0_translator:uav_byteenable
	wire          ap102_led_0_avs_s0_agent_m0_read;                                                     // ap102_led_0_avs_s0_agent:m0_read -> ap102_led_0_avs_s0_translator:uav_read
	wire          ap102_led_0_avs_s0_agent_m0_readdatavalid;                                            // ap102_led_0_avs_s0_translator:uav_readdatavalid -> ap102_led_0_avs_s0_agent:m0_readdatavalid
	wire          ap102_led_0_avs_s0_agent_m0_lock;                                                     // ap102_led_0_avs_s0_agent:m0_lock -> ap102_led_0_avs_s0_translator:uav_lock
	wire   [31:0] ap102_led_0_avs_s0_agent_m0_writedata;                                                // ap102_led_0_avs_s0_agent:m0_writedata -> ap102_led_0_avs_s0_translator:uav_writedata
	wire          ap102_led_0_avs_s0_agent_m0_write;                                                    // ap102_led_0_avs_s0_agent:m0_write -> ap102_led_0_avs_s0_translator:uav_write
	wire    [2:0] ap102_led_0_avs_s0_agent_m0_burstcount;                                               // ap102_led_0_avs_s0_agent:m0_burstcount -> ap102_led_0_avs_s0_translator:uav_burstcount
	wire          ap102_led_0_avs_s0_agent_rf_source_valid;                                             // ap102_led_0_avs_s0_agent:rf_source_valid -> ap102_led_0_avs_s0_agent_rsp_fifo:in_valid
	wire  [106:0] ap102_led_0_avs_s0_agent_rf_source_data;                                              // ap102_led_0_avs_s0_agent:rf_source_data -> ap102_led_0_avs_s0_agent_rsp_fifo:in_data
	wire          ap102_led_0_avs_s0_agent_rf_source_ready;                                             // ap102_led_0_avs_s0_agent_rsp_fifo:in_ready -> ap102_led_0_avs_s0_agent:rf_source_ready
	wire          ap102_led_0_avs_s0_agent_rf_source_startofpacket;                                     // ap102_led_0_avs_s0_agent:rf_source_startofpacket -> ap102_led_0_avs_s0_agent_rsp_fifo:in_startofpacket
	wire          ap102_led_0_avs_s0_agent_rf_source_endofpacket;                                       // ap102_led_0_avs_s0_agent:rf_source_endofpacket -> ap102_led_0_avs_s0_agent_rsp_fifo:in_endofpacket
	wire          ap102_led_0_avs_s0_agent_rsp_fifo_out_valid;                                          // ap102_led_0_avs_s0_agent_rsp_fifo:out_valid -> ap102_led_0_avs_s0_agent:rf_sink_valid
	wire  [106:0] ap102_led_0_avs_s0_agent_rsp_fifo_out_data;                                           // ap102_led_0_avs_s0_agent_rsp_fifo:out_data -> ap102_led_0_avs_s0_agent:rf_sink_data
	wire          ap102_led_0_avs_s0_agent_rsp_fifo_out_ready;                                          // ap102_led_0_avs_s0_agent:rf_sink_ready -> ap102_led_0_avs_s0_agent_rsp_fifo:out_ready
	wire          ap102_led_0_avs_s0_agent_rsp_fifo_out_startofpacket;                                  // ap102_led_0_avs_s0_agent_rsp_fifo:out_startofpacket -> ap102_led_0_avs_s0_agent:rf_sink_startofpacket
	wire          ap102_led_0_avs_s0_agent_rsp_fifo_out_endofpacket;                                    // ap102_led_0_avs_s0_agent_rsp_fifo:out_endofpacket -> ap102_led_0_avs_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                    // cmd_mux:src_valid -> ap102_led_0_avs_s0_agent:cp_valid
	wire  [105:0] cmd_mux_src_data;                                                                     // cmd_mux:src_data -> ap102_led_0_avs_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                                    // ap102_led_0_avs_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                                  // cmd_mux:src_channel -> ap102_led_0_avs_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                            // cmd_mux:src_startofpacket -> ap102_led_0_avs_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                              // cmd_mux:src_endofpacket -> ap102_led_0_avs_s0_agent:cp_endofpacket
	wire   [31:0] pwm_decoder_0_avs_s0_agent_m0_readdata;                                               // pwm_decoder_0_avs_s0_translator:uav_readdata -> pwm_decoder_0_avs_s0_agent:m0_readdata
	wire          pwm_decoder_0_avs_s0_agent_m0_waitrequest;                                            // pwm_decoder_0_avs_s0_translator:uav_waitrequest -> pwm_decoder_0_avs_s0_agent:m0_waitrequest
	wire          pwm_decoder_0_avs_s0_agent_m0_debugaccess;                                            // pwm_decoder_0_avs_s0_agent:m0_debugaccess -> pwm_decoder_0_avs_s0_translator:uav_debugaccess
	wire   [31:0] pwm_decoder_0_avs_s0_agent_m0_address;                                                // pwm_decoder_0_avs_s0_agent:m0_address -> pwm_decoder_0_avs_s0_translator:uav_address
	wire    [3:0] pwm_decoder_0_avs_s0_agent_m0_byteenable;                                             // pwm_decoder_0_avs_s0_agent:m0_byteenable -> pwm_decoder_0_avs_s0_translator:uav_byteenable
	wire          pwm_decoder_0_avs_s0_agent_m0_read;                                                   // pwm_decoder_0_avs_s0_agent:m0_read -> pwm_decoder_0_avs_s0_translator:uav_read
	wire          pwm_decoder_0_avs_s0_agent_m0_readdatavalid;                                          // pwm_decoder_0_avs_s0_translator:uav_readdatavalid -> pwm_decoder_0_avs_s0_agent:m0_readdatavalid
	wire          pwm_decoder_0_avs_s0_agent_m0_lock;                                                   // pwm_decoder_0_avs_s0_agent:m0_lock -> pwm_decoder_0_avs_s0_translator:uav_lock
	wire   [31:0] pwm_decoder_0_avs_s0_agent_m0_writedata;                                              // pwm_decoder_0_avs_s0_agent:m0_writedata -> pwm_decoder_0_avs_s0_translator:uav_writedata
	wire          pwm_decoder_0_avs_s0_agent_m0_write;                                                  // pwm_decoder_0_avs_s0_agent:m0_write -> pwm_decoder_0_avs_s0_translator:uav_write
	wire    [2:0] pwm_decoder_0_avs_s0_agent_m0_burstcount;                                             // pwm_decoder_0_avs_s0_agent:m0_burstcount -> pwm_decoder_0_avs_s0_translator:uav_burstcount
	wire          pwm_decoder_0_avs_s0_agent_rf_source_valid;                                           // pwm_decoder_0_avs_s0_agent:rf_source_valid -> pwm_decoder_0_avs_s0_agent_rsp_fifo:in_valid
	wire  [106:0] pwm_decoder_0_avs_s0_agent_rf_source_data;                                            // pwm_decoder_0_avs_s0_agent:rf_source_data -> pwm_decoder_0_avs_s0_agent_rsp_fifo:in_data
	wire          pwm_decoder_0_avs_s0_agent_rf_source_ready;                                           // pwm_decoder_0_avs_s0_agent_rsp_fifo:in_ready -> pwm_decoder_0_avs_s0_agent:rf_source_ready
	wire          pwm_decoder_0_avs_s0_agent_rf_source_startofpacket;                                   // pwm_decoder_0_avs_s0_agent:rf_source_startofpacket -> pwm_decoder_0_avs_s0_agent_rsp_fifo:in_startofpacket
	wire          pwm_decoder_0_avs_s0_agent_rf_source_endofpacket;                                     // pwm_decoder_0_avs_s0_agent:rf_source_endofpacket -> pwm_decoder_0_avs_s0_agent_rsp_fifo:in_endofpacket
	wire          pwm_decoder_0_avs_s0_agent_rsp_fifo_out_valid;                                        // pwm_decoder_0_avs_s0_agent_rsp_fifo:out_valid -> pwm_decoder_0_avs_s0_agent:rf_sink_valid
	wire  [106:0] pwm_decoder_0_avs_s0_agent_rsp_fifo_out_data;                                         // pwm_decoder_0_avs_s0_agent_rsp_fifo:out_data -> pwm_decoder_0_avs_s0_agent:rf_sink_data
	wire          pwm_decoder_0_avs_s0_agent_rsp_fifo_out_ready;                                        // pwm_decoder_0_avs_s0_agent:rf_sink_ready -> pwm_decoder_0_avs_s0_agent_rsp_fifo:out_ready
	wire          pwm_decoder_0_avs_s0_agent_rsp_fifo_out_startofpacket;                                // pwm_decoder_0_avs_s0_agent_rsp_fifo:out_startofpacket -> pwm_decoder_0_avs_s0_agent:rf_sink_startofpacket
	wire          pwm_decoder_0_avs_s0_agent_rsp_fifo_out_endofpacket;                                  // pwm_decoder_0_avs_s0_agent_rsp_fifo:out_endofpacket -> pwm_decoder_0_avs_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                // cmd_mux_001:src_valid -> pwm_decoder_0_avs_s0_agent:cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                                 // cmd_mux_001:src_data -> pwm_decoder_0_avs_s0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                // pwm_decoder_0_avs_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                                              // cmd_mux_001:src_channel -> pwm_decoder_0_avs_s0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                        // cmd_mux_001:src_startofpacket -> pwm_decoder_0_avs_s0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                          // cmd_mux_001:src_endofpacket -> pwm_decoder_0_avs_s0_agent:cp_endofpacket
	wire   [31:0] pwm_dshot_0_avs_s0_agent_m0_readdata;                                                 // pwm_dshot_0_avs_s0_translator:uav_readdata -> pwm_dshot_0_avs_s0_agent:m0_readdata
	wire          pwm_dshot_0_avs_s0_agent_m0_waitrequest;                                              // pwm_dshot_0_avs_s0_translator:uav_waitrequest -> pwm_dshot_0_avs_s0_agent:m0_waitrequest
	wire          pwm_dshot_0_avs_s0_agent_m0_debugaccess;                                              // pwm_dshot_0_avs_s0_agent:m0_debugaccess -> pwm_dshot_0_avs_s0_translator:uav_debugaccess
	wire   [31:0] pwm_dshot_0_avs_s0_agent_m0_address;                                                  // pwm_dshot_0_avs_s0_agent:m0_address -> pwm_dshot_0_avs_s0_translator:uav_address
	wire    [3:0] pwm_dshot_0_avs_s0_agent_m0_byteenable;                                               // pwm_dshot_0_avs_s0_agent:m0_byteenable -> pwm_dshot_0_avs_s0_translator:uav_byteenable
	wire          pwm_dshot_0_avs_s0_agent_m0_read;                                                     // pwm_dshot_0_avs_s0_agent:m0_read -> pwm_dshot_0_avs_s0_translator:uav_read
	wire          pwm_dshot_0_avs_s0_agent_m0_readdatavalid;                                            // pwm_dshot_0_avs_s0_translator:uav_readdatavalid -> pwm_dshot_0_avs_s0_agent:m0_readdatavalid
	wire          pwm_dshot_0_avs_s0_agent_m0_lock;                                                     // pwm_dshot_0_avs_s0_agent:m0_lock -> pwm_dshot_0_avs_s0_translator:uav_lock
	wire   [31:0] pwm_dshot_0_avs_s0_agent_m0_writedata;                                                // pwm_dshot_0_avs_s0_agent:m0_writedata -> pwm_dshot_0_avs_s0_translator:uav_writedata
	wire          pwm_dshot_0_avs_s0_agent_m0_write;                                                    // pwm_dshot_0_avs_s0_agent:m0_write -> pwm_dshot_0_avs_s0_translator:uav_write
	wire    [2:0] pwm_dshot_0_avs_s0_agent_m0_burstcount;                                               // pwm_dshot_0_avs_s0_agent:m0_burstcount -> pwm_dshot_0_avs_s0_translator:uav_burstcount
	wire          pwm_dshot_0_avs_s0_agent_rf_source_valid;                                             // pwm_dshot_0_avs_s0_agent:rf_source_valid -> pwm_dshot_0_avs_s0_agent_rsp_fifo:in_valid
	wire  [106:0] pwm_dshot_0_avs_s0_agent_rf_source_data;                                              // pwm_dshot_0_avs_s0_agent:rf_source_data -> pwm_dshot_0_avs_s0_agent_rsp_fifo:in_data
	wire          pwm_dshot_0_avs_s0_agent_rf_source_ready;                                             // pwm_dshot_0_avs_s0_agent_rsp_fifo:in_ready -> pwm_dshot_0_avs_s0_agent:rf_source_ready
	wire          pwm_dshot_0_avs_s0_agent_rf_source_startofpacket;                                     // pwm_dshot_0_avs_s0_agent:rf_source_startofpacket -> pwm_dshot_0_avs_s0_agent_rsp_fifo:in_startofpacket
	wire          pwm_dshot_0_avs_s0_agent_rf_source_endofpacket;                                       // pwm_dshot_0_avs_s0_agent:rf_source_endofpacket -> pwm_dshot_0_avs_s0_agent_rsp_fifo:in_endofpacket
	wire          pwm_dshot_0_avs_s0_agent_rsp_fifo_out_valid;                                          // pwm_dshot_0_avs_s0_agent_rsp_fifo:out_valid -> pwm_dshot_0_avs_s0_agent:rf_sink_valid
	wire  [106:0] pwm_dshot_0_avs_s0_agent_rsp_fifo_out_data;                                           // pwm_dshot_0_avs_s0_agent_rsp_fifo:out_data -> pwm_dshot_0_avs_s0_agent:rf_sink_data
	wire          pwm_dshot_0_avs_s0_agent_rsp_fifo_out_ready;                                          // pwm_dshot_0_avs_s0_agent:rf_sink_ready -> pwm_dshot_0_avs_s0_agent_rsp_fifo:out_ready
	wire          pwm_dshot_0_avs_s0_agent_rsp_fifo_out_startofpacket;                                  // pwm_dshot_0_avs_s0_agent_rsp_fifo:out_startofpacket -> pwm_dshot_0_avs_s0_agent:rf_sink_startofpacket
	wire          pwm_dshot_0_avs_s0_agent_rsp_fifo_out_endofpacket;                                    // pwm_dshot_0_avs_s0_agent_rsp_fifo:out_endofpacket -> pwm_dshot_0_avs_s0_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                // cmd_mux_002:src_valid -> pwm_dshot_0_avs_s0_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                                 // cmd_mux_002:src_data -> pwm_dshot_0_avs_s0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                // pwm_dshot_0_avs_s0_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                                              // cmd_mux_002:src_channel -> pwm_dshot_0_avs_s0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                        // cmd_mux_002:src_startofpacket -> pwm_dshot_0_avs_s0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                          // cmd_mux_002:src_endofpacket -> pwm_dshot_0_avs_s0_agent:cp_endofpacket
	wire   [31:0] gpio_led_0_avs_slave_agent_m0_readdata;                                               // gpio_led_0_avs_slave_translator:uav_readdata -> gpio_led_0_avs_slave_agent:m0_readdata
	wire          gpio_led_0_avs_slave_agent_m0_waitrequest;                                            // gpio_led_0_avs_slave_translator:uav_waitrequest -> gpio_led_0_avs_slave_agent:m0_waitrequest
	wire          gpio_led_0_avs_slave_agent_m0_debugaccess;                                            // gpio_led_0_avs_slave_agent:m0_debugaccess -> gpio_led_0_avs_slave_translator:uav_debugaccess
	wire   [31:0] gpio_led_0_avs_slave_agent_m0_address;                                                // gpio_led_0_avs_slave_agent:m0_address -> gpio_led_0_avs_slave_translator:uav_address
	wire    [3:0] gpio_led_0_avs_slave_agent_m0_byteenable;                                             // gpio_led_0_avs_slave_agent:m0_byteenable -> gpio_led_0_avs_slave_translator:uav_byteenable
	wire          gpio_led_0_avs_slave_agent_m0_read;                                                   // gpio_led_0_avs_slave_agent:m0_read -> gpio_led_0_avs_slave_translator:uav_read
	wire          gpio_led_0_avs_slave_agent_m0_readdatavalid;                                          // gpio_led_0_avs_slave_translator:uav_readdatavalid -> gpio_led_0_avs_slave_agent:m0_readdatavalid
	wire          gpio_led_0_avs_slave_agent_m0_lock;                                                   // gpio_led_0_avs_slave_agent:m0_lock -> gpio_led_0_avs_slave_translator:uav_lock
	wire   [31:0] gpio_led_0_avs_slave_agent_m0_writedata;                                              // gpio_led_0_avs_slave_agent:m0_writedata -> gpio_led_0_avs_slave_translator:uav_writedata
	wire          gpio_led_0_avs_slave_agent_m0_write;                                                  // gpio_led_0_avs_slave_agent:m0_write -> gpio_led_0_avs_slave_translator:uav_write
	wire    [2:0] gpio_led_0_avs_slave_agent_m0_burstcount;                                             // gpio_led_0_avs_slave_agent:m0_burstcount -> gpio_led_0_avs_slave_translator:uav_burstcount
	wire          gpio_led_0_avs_slave_agent_rf_source_valid;                                           // gpio_led_0_avs_slave_agent:rf_source_valid -> gpio_led_0_avs_slave_agent_rsp_fifo:in_valid
	wire  [106:0] gpio_led_0_avs_slave_agent_rf_source_data;                                            // gpio_led_0_avs_slave_agent:rf_source_data -> gpio_led_0_avs_slave_agent_rsp_fifo:in_data
	wire          gpio_led_0_avs_slave_agent_rf_source_ready;                                           // gpio_led_0_avs_slave_agent_rsp_fifo:in_ready -> gpio_led_0_avs_slave_agent:rf_source_ready
	wire          gpio_led_0_avs_slave_agent_rf_source_startofpacket;                                   // gpio_led_0_avs_slave_agent:rf_source_startofpacket -> gpio_led_0_avs_slave_agent_rsp_fifo:in_startofpacket
	wire          gpio_led_0_avs_slave_agent_rf_source_endofpacket;                                     // gpio_led_0_avs_slave_agent:rf_source_endofpacket -> gpio_led_0_avs_slave_agent_rsp_fifo:in_endofpacket
	wire          gpio_led_0_avs_slave_agent_rsp_fifo_out_valid;                                        // gpio_led_0_avs_slave_agent_rsp_fifo:out_valid -> gpio_led_0_avs_slave_agent:rf_sink_valid
	wire  [106:0] gpio_led_0_avs_slave_agent_rsp_fifo_out_data;                                         // gpio_led_0_avs_slave_agent_rsp_fifo:out_data -> gpio_led_0_avs_slave_agent:rf_sink_data
	wire          gpio_led_0_avs_slave_agent_rsp_fifo_out_ready;                                        // gpio_led_0_avs_slave_agent:rf_sink_ready -> gpio_led_0_avs_slave_agent_rsp_fifo:out_ready
	wire          gpio_led_0_avs_slave_agent_rsp_fifo_out_startofpacket;                                // gpio_led_0_avs_slave_agent_rsp_fifo:out_startofpacket -> gpio_led_0_avs_slave_agent:rf_sink_startofpacket
	wire          gpio_led_0_avs_slave_agent_rsp_fifo_out_endofpacket;                                  // gpio_led_0_avs_slave_agent_rsp_fifo:out_endofpacket -> gpio_led_0_avs_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                // cmd_mux_003:src_valid -> gpio_led_0_avs_slave_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                                                 // cmd_mux_003:src_data -> gpio_led_0_avs_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                // gpio_led_0_avs_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                                              // cmd_mux_003:src_channel -> gpio_led_0_avs_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                        // cmd_mux_003:src_startofpacket -> gpio_led_0_avs_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                          // cmd_mux_003:src_endofpacket -> gpio_led_0_avs_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                         // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                      // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                      // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_address;                                          // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                       // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                             // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                    // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                             // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                        // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                            // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                       // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                     // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [106:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                      // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                     // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                               // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                  // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [106:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                  // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                            // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                // cmd_mux_004:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                                 // cmd_mux_004:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                                              // cmd_mux_004:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                        // cmd_mux_004:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                          // cmd_mux_004:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                         // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                      // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                      // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                          // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                       // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                             // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                    // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                             // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                        // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                            // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                       // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                     // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] timer_0_s1_agent_rf_source_data;                                                      // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                     // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                             // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                               // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                  // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [106:0] timer_0_s1_agent_rsp_fifo_out_data;                                                   // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                  // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                            // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                // cmd_mux_005:src_valid -> timer_0_s1_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                                 // cmd_mux_005:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                // timer_0_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                                              // cmd_mux_005:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                        // cmd_mux_005:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                          // cmd_mux_005:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          packets_to_master_0_avalon_master_agent_cp_valid;                                     // packets_to_master_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [105:0] packets_to_master_0_avalon_master_agent_cp_data;                                      // packets_to_master_0_avalon_master_agent:cp_data -> router:sink_data
	wire          packets_to_master_0_avalon_master_agent_cp_ready;                                     // router:sink_ready -> packets_to_master_0_avalon_master_agent:cp_ready
	wire          packets_to_master_0_avalon_master_agent_cp_startofpacket;                             // packets_to_master_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          packets_to_master_0_avalon_master_agent_cp_endofpacket;                               // packets_to_master_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          ap102_led_0_avs_s0_agent_rp_valid;                                                    // ap102_led_0_avs_s0_agent:rp_valid -> router_001:sink_valid
	wire  [105:0] ap102_led_0_avs_s0_agent_rp_data;                                                     // ap102_led_0_avs_s0_agent:rp_data -> router_001:sink_data
	wire          ap102_led_0_avs_s0_agent_rp_ready;                                                    // router_001:sink_ready -> ap102_led_0_avs_s0_agent:rp_ready
	wire          ap102_led_0_avs_s0_agent_rp_startofpacket;                                            // ap102_led_0_avs_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          ap102_led_0_avs_s0_agent_rp_endofpacket;                                              // ap102_led_0_avs_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                 // router_001:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_001_src_data;                                                                  // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                                 // rsp_demux:sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                                               // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                         // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                           // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          pwm_decoder_0_avs_s0_agent_rp_valid;                                                  // pwm_decoder_0_avs_s0_agent:rp_valid -> router_002:sink_valid
	wire  [105:0] pwm_decoder_0_avs_s0_agent_rp_data;                                                   // pwm_decoder_0_avs_s0_agent:rp_data -> router_002:sink_data
	wire          pwm_decoder_0_avs_s0_agent_rp_ready;                                                  // router_002:sink_ready -> pwm_decoder_0_avs_s0_agent:rp_ready
	wire          pwm_decoder_0_avs_s0_agent_rp_startofpacket;                                          // pwm_decoder_0_avs_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          pwm_decoder_0_avs_s0_agent_rp_endofpacket;                                            // pwm_decoder_0_avs_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                 // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_002_src_data;                                                                  // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                                 // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                                               // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                                         // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                                           // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pwm_dshot_0_avs_s0_agent_rp_valid;                                                    // pwm_dshot_0_avs_s0_agent:rp_valid -> router_003:sink_valid
	wire  [105:0] pwm_dshot_0_avs_s0_agent_rp_data;                                                     // pwm_dshot_0_avs_s0_agent:rp_data -> router_003:sink_data
	wire          pwm_dshot_0_avs_s0_agent_rp_ready;                                                    // router_003:sink_ready -> pwm_dshot_0_avs_s0_agent:rp_ready
	wire          pwm_dshot_0_avs_s0_agent_rp_startofpacket;                                            // pwm_dshot_0_avs_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          pwm_dshot_0_avs_s0_agent_rp_endofpacket;                                              // pwm_dshot_0_avs_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                 // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_003_src_data;                                                                  // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                                 // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                                               // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                                         // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                                           // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          gpio_led_0_avs_slave_agent_rp_valid;                                                  // gpio_led_0_avs_slave_agent:rp_valid -> router_004:sink_valid
	wire  [105:0] gpio_led_0_avs_slave_agent_rp_data;                                                   // gpio_led_0_avs_slave_agent:rp_data -> router_004:sink_data
	wire          gpio_led_0_avs_slave_agent_rp_ready;                                                  // router_004:sink_ready -> gpio_led_0_avs_slave_agent:rp_ready
	wire          gpio_led_0_avs_slave_agent_rp_startofpacket;                                          // gpio_led_0_avs_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          gpio_led_0_avs_slave_agent_rp_endofpacket;                                            // gpio_led_0_avs_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                 // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_004_src_data;                                                                  // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                                 // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                                               // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                                         // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                                           // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                            // sysid_qsys_0_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [105:0] sysid_qsys_0_control_slave_agent_rp_data;                                             // sysid_qsys_0_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                            // router_005:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                      // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                 // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_005_src_data;                                                                  // router_005:src_data -> rsp_demux_004:sink_data
	wire          router_005_src_ready;                                                                 // rsp_demux_004:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                                               // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_startofpacket;                                                         // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_005_src_endofpacket;                                                           // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                            // timer_0_s1_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] timer_0_s1_agent_rp_data;                                                             // timer_0_s1_agent:rp_data -> router_006:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                            // router_006:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                    // timer_0_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                      // timer_0_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                 // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_006_src_data;                                                                  // router_006:src_data -> rsp_demux_005:sink_data
	wire          router_006_src_ready;                                                                 // rsp_demux_005:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                                               // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_startofpacket;                                                         // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_006_src_endofpacket;                                                           // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_src_valid;                                                                     // router:src_valid -> packets_to_master_0_avalon_master_limiter:cmd_sink_valid
	wire  [105:0] router_src_data;                                                                      // router:src_data -> packets_to_master_0_avalon_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                     // packets_to_master_0_avalon_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                                   // router:src_channel -> packets_to_master_0_avalon_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                             // router:src_startofpacket -> packets_to_master_0_avalon_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                               // router:src_endofpacket -> packets_to_master_0_avalon_master_limiter:cmd_sink_endofpacket
	wire  [105:0] packets_to_master_0_avalon_master_limiter_cmd_src_data;                               // packets_to_master_0_avalon_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          packets_to_master_0_avalon_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> packets_to_master_0_avalon_master_limiter:cmd_src_ready
	wire    [5:0] packets_to_master_0_avalon_master_limiter_cmd_src_channel;                            // packets_to_master_0_avalon_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          packets_to_master_0_avalon_master_limiter_cmd_src_startofpacket;                      // packets_to_master_0_avalon_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          packets_to_master_0_avalon_master_limiter_cmd_src_endofpacket;                        // packets_to_master_0_avalon_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                    // rsp_mux:src_valid -> packets_to_master_0_avalon_master_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_src_data;                                                                     // rsp_mux:src_data -> packets_to_master_0_avalon_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                    // packets_to_master_0_avalon_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                                  // rsp_mux:src_channel -> packets_to_master_0_avalon_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                            // rsp_mux:src_startofpacket -> packets_to_master_0_avalon_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                              // rsp_mux:src_endofpacket -> packets_to_master_0_avalon_master_limiter:rsp_sink_endofpacket
	wire          packets_to_master_0_avalon_master_limiter_rsp_src_valid;                              // packets_to_master_0_avalon_master_limiter:rsp_src_valid -> packets_to_master_0_avalon_master_agent:rp_valid
	wire  [105:0] packets_to_master_0_avalon_master_limiter_rsp_src_data;                               // packets_to_master_0_avalon_master_limiter:rsp_src_data -> packets_to_master_0_avalon_master_agent:rp_data
	wire          packets_to_master_0_avalon_master_limiter_rsp_src_ready;                              // packets_to_master_0_avalon_master_agent:rp_ready -> packets_to_master_0_avalon_master_limiter:rsp_src_ready
	wire    [5:0] packets_to_master_0_avalon_master_limiter_rsp_src_channel;                            // packets_to_master_0_avalon_master_limiter:rsp_src_channel -> packets_to_master_0_avalon_master_agent:rp_channel
	wire          packets_to_master_0_avalon_master_limiter_rsp_src_startofpacket;                      // packets_to_master_0_avalon_master_limiter:rsp_src_startofpacket -> packets_to_master_0_avalon_master_agent:rp_startofpacket
	wire          packets_to_master_0_avalon_master_limiter_rsp_src_endofpacket;                        // packets_to_master_0_avalon_master_limiter:rsp_src_endofpacket -> packets_to_master_0_avalon_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [105:0] cmd_demux_src0_data;                                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_src1_data;                                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                 // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] cmd_demux_src4_data;                                                                  // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                                               // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                         // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                           // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                 // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] cmd_demux_src5_data;                                                                  // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire    [5:0] cmd_demux_src5_channel;                                                               // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                         // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                           // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [105:0] rsp_demux_src0_data;                                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [105:0] rsp_demux_001_src0_data;                                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_002_src0_data;                                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_003_src0_data;                                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                             // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [105:0] rsp_demux_004_src0_data;                                                              // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                             // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                                           // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                             // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [105:0] rsp_demux_005_src0_data;                                                              // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                             // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                                           // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire    [5:0] packets_to_master_0_avalon_master_limiter_cmd_valid_data;                             // packets_to_master_0_avalon_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire          ap102_led_0_avs_s0_agent_rdata_fifo_src_valid;                                        // ap102_led_0_avs_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] ap102_led_0_avs_s0_agent_rdata_fifo_src_data;                                         // ap102_led_0_avs_s0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          ap102_led_0_avs_s0_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter:in_0_ready -> ap102_led_0_avs_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                        // avalon_st_adapter:out_0_valid -> ap102_led_0_avs_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                         // avalon_st_adapter:out_0_data -> ap102_led_0_avs_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                        // ap102_led_0_avs_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                        // avalon_st_adapter:out_0_error -> ap102_led_0_avs_s0_agent:rdata_fifo_sink_error
	wire          pwm_decoder_0_avs_s0_agent_rdata_fifo_src_valid;                                      // pwm_decoder_0_avs_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] pwm_decoder_0_avs_s0_agent_rdata_fifo_src_data;                                       // pwm_decoder_0_avs_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          pwm_decoder_0_avs_s0_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_001:in_0_ready -> pwm_decoder_0_avs_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                    // avalon_st_adapter_001:out_0_valid -> pwm_decoder_0_avs_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                     // avalon_st_adapter_001:out_0_data -> pwm_decoder_0_avs_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                    // pwm_decoder_0_avs_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                    // avalon_st_adapter_001:out_0_error -> pwm_decoder_0_avs_s0_agent:rdata_fifo_sink_error
	wire          pwm_dshot_0_avs_s0_agent_rdata_fifo_src_valid;                                        // pwm_dshot_0_avs_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] pwm_dshot_0_avs_s0_agent_rdata_fifo_src_data;                                         // pwm_dshot_0_avs_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          pwm_dshot_0_avs_s0_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_002:in_0_ready -> pwm_dshot_0_avs_s0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                    // avalon_st_adapter_002:out_0_valid -> pwm_dshot_0_avs_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                     // avalon_st_adapter_002:out_0_data -> pwm_dshot_0_avs_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                    // pwm_dshot_0_avs_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                    // avalon_st_adapter_002:out_0_error -> pwm_dshot_0_avs_s0_agent:rdata_fifo_sink_error
	wire          gpio_led_0_avs_slave_agent_rdata_fifo_src_valid;                                      // gpio_led_0_avs_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] gpio_led_0_avs_slave_agent_rdata_fifo_src_data;                                       // gpio_led_0_avs_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          gpio_led_0_avs_slave_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_003:in_0_ready -> gpio_led_0_avs_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                    // avalon_st_adapter_003:out_0_valid -> gpio_led_0_avs_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                     // avalon_st_adapter_003:out_0_data -> gpio_led_0_avs_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                    // gpio_led_0_avs_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                    // avalon_st_adapter_003:out_0_error -> gpio_led_0_avs_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                                // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                                 // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_004:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                    // avalon_st_adapter_004:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                     // avalon_st_adapter_004:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                    // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                    // avalon_st_adapter_004:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                                // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                 // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_005:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                    // avalon_st_adapter_005:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                     // avalon_st_adapter_005:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                    // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                    // avalon_st_adapter_005:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) packets_to_master_0_avalon_master_translator (
		.clk                    (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (packets_to_master_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (packets_to_master_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (packets_to_master_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (packets_to_master_0_avalon_master_read),                                               //                          .read
		.av_readdata            (packets_to_master_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (packets_to_master_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (packets_to_master_0_avalon_master_write),                                              //                          .write
		.av_writedata           (packets_to_master_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ap102_led_0_avs_s0_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ap102_led_0_avs_s0_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (ap102_led_0_avs_s0_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (ap102_led_0_avs_s0_agent_m0_read),                          //                         .read
		.uav_write              (ap102_led_0_avs_s0_agent_m0_write),                         //                         .write
		.uav_waitrequest        (ap102_led_0_avs_s0_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (ap102_led_0_avs_s0_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (ap102_led_0_avs_s0_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (ap102_led_0_avs_s0_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (ap102_led_0_avs_s0_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (ap102_led_0_avs_s0_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (ap102_led_0_avs_s0_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (ap102_led_0_avs_s0_address),                                //      avalon_anti_slave_0.address
		.av_write               (ap102_led_0_avs_s0_write),                                  //                         .write
		.av_writedata           (ap102_led_0_avs_s0_writedata),                              //                         .writedata
		.av_waitrequest         (ap102_led_0_avs_s0_waitrequest),                            //                         .waitrequest
		.av_read                (),                                                          //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),                      //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_decoder_0_avs_s0_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_decoder_0_avs_s0_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_decoder_0_avs_s0_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (pwm_decoder_0_avs_s0_agent_m0_read),                        //                         .read
		.uav_write              (pwm_decoder_0_avs_s0_agent_m0_write),                       //                         .write
		.uav_waitrequest        (pwm_decoder_0_avs_s0_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (pwm_decoder_0_avs_s0_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (pwm_decoder_0_avs_s0_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (pwm_decoder_0_avs_s0_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (pwm_decoder_0_avs_s0_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (pwm_decoder_0_avs_s0_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (pwm_decoder_0_avs_s0_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (pwm_decoder_0_avs_s0_address),                              //      avalon_anti_slave_0.address
		.av_write               (pwm_decoder_0_avs_s0_write),                                //                         .write
		.av_read                (pwm_decoder_0_avs_s0_read),                                 //                         .read
		.av_readdata            (pwm_decoder_0_avs_s0_readdata),                             //                         .readdata
		.av_writedata           (pwm_decoder_0_avs_s0_writedata),                            //                         .writedata
		.av_waitrequest         (pwm_decoder_0_avs_s0_waitrequest),                          //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwm_dshot_0_avs_s0_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pwm_dshot_0_avs_s0_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (pwm_dshot_0_avs_s0_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (pwm_dshot_0_avs_s0_agent_m0_read),                          //                         .read
		.uav_write              (pwm_dshot_0_avs_s0_agent_m0_write),                         //                         .write
		.uav_waitrequest        (pwm_dshot_0_avs_s0_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (pwm_dshot_0_avs_s0_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (pwm_dshot_0_avs_s0_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (pwm_dshot_0_avs_s0_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (pwm_dshot_0_avs_s0_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (pwm_dshot_0_avs_s0_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (pwm_dshot_0_avs_s0_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (pwm_dshot_0_avs_s0_address),                                //      avalon_anti_slave_0.address
		.av_write               (pwm_dshot_0_avs_s0_write),                                  //                         .write
		.av_writedata           (pwm_dshot_0_avs_s0_writedata),                              //                         .writedata
		.av_waitrequest         (pwm_dshot_0_avs_s0_waitrequest),                            //                         .waitrequest
		.av_chipselect          (pwm_dshot_0_avs_s0_chipselect),                             //                         .chipselect
		.av_read                (),                                                          //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),                      //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gpio_led_0_avs_slave_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gpio_led_0_avs_slave_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (gpio_led_0_avs_slave_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (gpio_led_0_avs_slave_agent_m0_read),                        //                         .read
		.uav_write              (gpio_led_0_avs_slave_agent_m0_write),                       //                         .write
		.uav_waitrequest        (gpio_led_0_avs_slave_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (gpio_led_0_avs_slave_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (gpio_led_0_avs_slave_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (gpio_led_0_avs_slave_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (gpio_led_0_avs_slave_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (gpio_led_0_avs_slave_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (gpio_led_0_avs_slave_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (gpio_led_0_avs_slave_address),                              //      avalon_anti_slave_0.address
		.av_write               (gpio_led_0_avs_slave_write),                                //                         .write
		.av_writedata           (gpio_led_0_avs_slave_writedata),                            //                         .writedata
		.av_waitrequest         (gpio_led_0_avs_slave_waitrequest),                          //                         .waitrequest
		.av_read                (),                                                          //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),                      //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),                  //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),                       //                         .readdata
		.av_write               (),                                                          //              (terminated)
		.av_read                (),                                                          //              (terminated)
		.av_writedata           (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                                  //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (timer_0_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                                          //                         .write
		.av_readdata            (timer_0_s1_readdata),                                       //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                                      //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) packets_to_master_0_avalon_master_agent (
		.clk                   (clk_0_clk_clk),                                                                        //       clk.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (packets_to_master_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (packets_to_master_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (packets_to_master_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (packets_to_master_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (packets_to_master_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (packets_to_master_0_avalon_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (packets_to_master_0_avalon_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (packets_to_master_0_avalon_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (packets_to_master_0_avalon_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (packets_to_master_0_avalon_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (packets_to_master_0_avalon_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ap102_led_0_avs_s0_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ap102_led_0_avs_s0_agent_m0_address),                       //              m0.address
		.m0_burstcount           (ap102_led_0_avs_s0_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (ap102_led_0_avs_s0_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (ap102_led_0_avs_s0_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (ap102_led_0_avs_s0_agent_m0_lock),                          //                .lock
		.m0_readdata             (ap102_led_0_avs_s0_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (ap102_led_0_avs_s0_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (ap102_led_0_avs_s0_agent_m0_read),                          //                .read
		.m0_waitrequest          (ap102_led_0_avs_s0_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (ap102_led_0_avs_s0_agent_m0_writedata),                     //                .writedata
		.m0_write                (ap102_led_0_avs_s0_agent_m0_write),                         //                .write
		.rp_endofpacket          (ap102_led_0_avs_s0_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (ap102_led_0_avs_s0_agent_rp_ready),                         //                .ready
		.rp_valid                (ap102_led_0_avs_s0_agent_rp_valid),                         //                .valid
		.rp_data                 (ap102_led_0_avs_s0_agent_rp_data),                          //                .data
		.rp_startofpacket        (ap102_led_0_avs_s0_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (ap102_led_0_avs_s0_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (ap102_led_0_avs_s0_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (ap102_led_0_avs_s0_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (ap102_led_0_avs_s0_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (ap102_led_0_avs_s0_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (ap102_led_0_avs_s0_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (ap102_led_0_avs_s0_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (ap102_led_0_avs_s0_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (ap102_led_0_avs_s0_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (ap102_led_0_avs_s0_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (ap102_led_0_avs_s0_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ap102_led_0_avs_s0_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (ap102_led_0_avs_s0_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ap102_led_0_avs_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ap102_led_0_avs_s0_agent_rf_source_data),                   //        in.data
		.in_valid          (ap102_led_0_avs_s0_agent_rf_source_valid),                  //          .valid
		.in_ready          (ap102_led_0_avs_s0_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (ap102_led_0_avs_s0_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (ap102_led_0_avs_s0_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (ap102_led_0_avs_s0_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (ap102_led_0_avs_s0_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (ap102_led_0_avs_s0_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (ap102_led_0_avs_s0_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (ap102_led_0_avs_s0_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_decoder_0_avs_s0_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_decoder_0_avs_s0_agent_m0_address),                     //              m0.address
		.m0_burstcount           (pwm_decoder_0_avs_s0_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (pwm_decoder_0_avs_s0_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (pwm_decoder_0_avs_s0_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (pwm_decoder_0_avs_s0_agent_m0_lock),                        //                .lock
		.m0_readdata             (pwm_decoder_0_avs_s0_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (pwm_decoder_0_avs_s0_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (pwm_decoder_0_avs_s0_agent_m0_read),                        //                .read
		.m0_waitrequest          (pwm_decoder_0_avs_s0_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (pwm_decoder_0_avs_s0_agent_m0_writedata),                   //                .writedata
		.m0_write                (pwm_decoder_0_avs_s0_agent_m0_write),                       //                .write
		.rp_endofpacket          (pwm_decoder_0_avs_s0_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (pwm_decoder_0_avs_s0_agent_rp_ready),                       //                .ready
		.rp_valid                (pwm_decoder_0_avs_s0_agent_rp_valid),                       //                .valid
		.rp_data                 (pwm_decoder_0_avs_s0_agent_rp_data),                        //                .data
		.rp_startofpacket        (pwm_decoder_0_avs_s0_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                   //                .channel
		.rf_sink_ready           (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (pwm_decoder_0_avs_s0_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (pwm_decoder_0_avs_s0_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (pwm_decoder_0_avs_s0_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (pwm_decoder_0_avs_s0_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (pwm_decoder_0_avs_s0_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (pwm_decoder_0_avs_s0_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_decoder_0_avs_s0_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (pwm_decoder_0_avs_s0_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_decoder_0_avs_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_decoder_0_avs_s0_agent_rf_source_data),                 //        in.data
		.in_valid          (pwm_decoder_0_avs_s0_agent_rf_source_valid),                //          .valid
		.in_ready          (pwm_decoder_0_avs_s0_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (pwm_decoder_0_avs_s0_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (pwm_decoder_0_avs_s0_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (pwm_decoder_0_avs_s0_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pwm_dshot_0_avs_s0_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwm_dshot_0_avs_s0_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwm_dshot_0_avs_s0_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwm_dshot_0_avs_s0_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwm_dshot_0_avs_s0_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwm_dshot_0_avs_s0_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwm_dshot_0_avs_s0_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwm_dshot_0_avs_s0_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwm_dshot_0_avs_s0_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwm_dshot_0_avs_s0_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwm_dshot_0_avs_s0_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwm_dshot_0_avs_s0_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwm_dshot_0_avs_s0_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwm_dshot_0_avs_s0_agent_rp_ready),                         //                .ready
		.rp_valid                (pwm_dshot_0_avs_s0_agent_rp_valid),                         //                .valid
		.rp_data                 (pwm_dshot_0_avs_s0_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwm_dshot_0_avs_s0_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwm_dshot_0_avs_s0_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwm_dshot_0_avs_s0_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwm_dshot_0_avs_s0_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwm_dshot_0_avs_s0_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwm_dshot_0_avs_s0_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (pwm_dshot_0_avs_s0_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwm_dshot_0_avs_s0_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwm_dshot_0_avs_s0_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwm_dshot_0_avs_s0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwm_dshot_0_avs_s0_agent_rf_source_data),                   //        in.data
		.in_valid          (pwm_dshot_0_avs_s0_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwm_dshot_0_avs_s0_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwm_dshot_0_avs_s0_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwm_dshot_0_avs_s0_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwm_dshot_0_avs_s0_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gpio_led_0_avs_slave_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gpio_led_0_avs_slave_agent_m0_address),                     //              m0.address
		.m0_burstcount           (gpio_led_0_avs_slave_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (gpio_led_0_avs_slave_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (gpio_led_0_avs_slave_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (gpio_led_0_avs_slave_agent_m0_lock),                        //                .lock
		.m0_readdata             (gpio_led_0_avs_slave_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (gpio_led_0_avs_slave_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (gpio_led_0_avs_slave_agent_m0_read),                        //                .read
		.m0_waitrequest          (gpio_led_0_avs_slave_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (gpio_led_0_avs_slave_agent_m0_writedata),                   //                .writedata
		.m0_write                (gpio_led_0_avs_slave_agent_m0_write),                       //                .write
		.rp_endofpacket          (gpio_led_0_avs_slave_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (gpio_led_0_avs_slave_agent_rp_ready),                       //                .ready
		.rp_valid                (gpio_led_0_avs_slave_agent_rp_valid),                       //                .valid
		.rp_data                 (gpio_led_0_avs_slave_agent_rp_data),                        //                .data
		.rp_startofpacket        (gpio_led_0_avs_slave_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                   //                .channel
		.rf_sink_ready           (gpio_led_0_avs_slave_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (gpio_led_0_avs_slave_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (gpio_led_0_avs_slave_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (gpio_led_0_avs_slave_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (gpio_led_0_avs_slave_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (gpio_led_0_avs_slave_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (gpio_led_0_avs_slave_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (gpio_led_0_avs_slave_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (gpio_led_0_avs_slave_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (gpio_led_0_avs_slave_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (gpio_led_0_avs_slave_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gpio_led_0_avs_slave_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (gpio_led_0_avs_slave_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gpio_led_0_avs_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gpio_led_0_avs_slave_agent_rf_source_data),                 //        in.data
		.in_valid          (gpio_led_0_avs_slave_agent_rf_source_valid),                //          .valid
		.in_ready          (gpio_led_0_avs_slave_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (gpio_led_0_avs_slave_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (gpio_led_0_avs_slave_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (gpio_led_0_avs_slave_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (gpio_led_0_avs_slave_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (gpio_led_0_avs_slave_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (gpio_led_0_avs_slave_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (gpio_led_0_avs_slave_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                   //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	avalonBus_mm_interconnect_0_router router (
		.sink_ready         (packets_to_master_0_avalon_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (packets_to_master_0_avalon_master_agent_cp_valid),          //          .valid
		.sink_data          (packets_to_master_0_avalon_master_agent_cp_data),           //          .data
		.sink_startofpacket (packets_to_master_0_avalon_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (packets_to_master_0_avalon_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	avalonBus_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (ap102_led_0_avs_s0_agent_rp_ready),                         //      sink.ready
		.sink_valid         (ap102_led_0_avs_s0_agent_rp_valid),                         //          .valid
		.sink_data          (ap102_led_0_avs_s0_agent_rp_data),                          //          .data
		.sink_startofpacket (ap102_led_0_avs_s0_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (ap102_led_0_avs_s0_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (pwm_decoder_0_avs_s0_agent_rp_ready),                       //      sink.ready
		.sink_valid         (pwm_decoder_0_avs_s0_agent_rp_valid),                       //          .valid
		.sink_data          (pwm_decoder_0_avs_s0_agent_rp_data),                        //          .data
		.sink_startofpacket (pwm_decoder_0_avs_s0_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (pwm_decoder_0_avs_s0_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (pwm_dshot_0_avs_s0_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwm_dshot_0_avs_s0_agent_rp_valid),                         //          .valid
		.sink_data          (pwm_dshot_0_avs_s0_agent_rp_data),                          //          .data
		.sink_startofpacket (pwm_dshot_0_avs_s0_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwm_dshot_0_avs_s0_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                      //       src.ready
		.src_valid          (router_003_src_valid),                                      //          .valid
		.src_data           (router_003_src_data),                                       //          .data
		.src_channel        (router_003_src_channel),                                    //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (gpio_led_0_avs_slave_agent_rp_ready),                       //      sink.ready
		.sink_valid         (gpio_led_0_avs_slave_agent_rp_valid),                       //          .valid
		.sink_data          (gpio_led_0_avs_slave_agent_rp_data),                        //          .data
		.sink_startofpacket (gpio_led_0_avs_slave_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (gpio_led_0_avs_slave_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                      //       src.ready
		.src_valid          (router_004_src_valid),                                      //          .valid
		.src_data           (router_004_src_data),                                       //          .data
		.src_channel        (router_004_src_channel),                                    //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),                 //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                      //       src.ready
		.src_valid          (router_005_src_valid),                                      //          .valid
		.src_data           (router_005_src_data),                                       //          .data
		.src_channel        (router_005_src_channel),                                    //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_router_001 router_006 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                      //       src.ready
		.src_valid          (router_006_src_valid),                                      //          .valid
		.src_data           (router_006_src_data),                                       //          .data
		.src_channel        (router_006_src_channel),                                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) packets_to_master_0_avalon_master_limiter (
		.clk                    (clk_0_clk_clk),                                                   //       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                //          .valid
		.cmd_sink_data          (router_src_data),                                                 //          .data
		.cmd_sink_channel       (router_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (packets_to_master_0_avalon_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (packets_to_master_0_avalon_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (packets_to_master_0_avalon_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (packets_to_master_0_avalon_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (packets_to_master_0_avalon_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (packets_to_master_0_avalon_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (packets_to_master_0_avalon_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (packets_to_master_0_avalon_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (packets_to_master_0_avalon_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (packets_to_master_0_avalon_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (packets_to_master_0_avalon_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (packets_to_master_0_avalon_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	avalonBus_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                   //        clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (packets_to_master_0_avalon_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (packets_to_master_0_avalon_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (packets_to_master_0_avalon_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (packets_to_master_0_avalon_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (packets_to_master_0_avalon_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (packets_to_master_0_avalon_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                                       //           .endofpacket
	);

	avalonBus_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src1_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //          .valid
		.src_data            (cmd_mux_002_src_data),                                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src2_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                     //          .valid
		.src_data            (cmd_mux_003_src_data),                                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src3_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                     //          .valid
		.src_data            (cmd_mux_004_src_data),                                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src4_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                     //          .valid
		.src_data            (cmd_mux_005_src_data),                                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src5_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                      //      sink.ready
		.sink_channel       (router_001_src_channel),                                    //          .channel
		.sink_data          (router_001_src_data),                                       //          .data
		.sink_startofpacket (router_001_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_001_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                      //      sink.ready
		.sink_channel       (router_002_src_channel),                                    //          .channel
		.sink_data          (router_002_src_data),                                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_002_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                             //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                      //      sink.ready
		.sink_channel       (router_003_src_channel),                                    //          .channel
		.sink_data          (router_003_src_data),                                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_003_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                             //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                      //      sink.ready
		.sink_channel       (router_004_src_channel),                                    //          .channel
		.sink_data          (router_004_src_data),                                       //          .data
		.sink_startofpacket (router_004_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_004_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                             //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                      //      sink.ready
		.sink_channel       (router_005_src_channel),                                    //          .channel
		.sink_data          (router_005_src_data),                                       //          .data
		.sink_startofpacket (router_005_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_005_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                             //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                      //      sink.ready
		.sink_channel       (router_006_src_channel),                                    //          .channel
		.sink_data          (router_006_src_data),                                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_006_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                             //          .endofpacket
	);

	avalonBus_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                             //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //          .valid
		.src_data            (rsp_mux_src_data),                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                   //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                   //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                            //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                  //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                   //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                            //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                  //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                   //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                            //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                  //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                  //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                   //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                          //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                             //          .endofpacket
	);

	avalonBus_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ap102_led_0_avs_s0_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (ap102_led_0_avs_s0_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (ap102_led_0_avs_s0_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	avalonBus_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_decoder_0_avs_s0_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (pwm_decoder_0_avs_s0_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (pwm_decoder_0_avs_s0_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                          //         .error
	);

	avalonBus_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pwm_dshot_0_avs_s0_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (pwm_dshot_0_avs_s0_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (pwm_dshot_0_avs_s0_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                          //         .error
	);

	avalonBus_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gpio_led_0_avs_slave_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (gpio_led_0_avs_slave_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (gpio_led_0_avs_slave_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

	avalonBus_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                          //         .error
	);

	avalonBus_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                          //         .error
	);

endmodule
