

module serial_tx( input wire i_reset, 
		  input wire i_start, 
		  input wire i_clk, 
		  input wire [DATA_WIDTH-1:0] i_data, 
		  output wire o_done,
	          output wire o_serial_data,
		  output wire o_serial_clock);
parameter DATA_WIDTH	= 32;	// Datawidth


reg [3:0] state;
reg [DATA_WIDTH:0] serial_data;
reg serial_clk;

localparam IDLE = 	4'b0000;
localparam DONE = 	4'b1111;
localparam START = 	4'b0001;


initial begin
	state <= IDLE;
	serial_data <= 0;
	serial_clk <= 0;
end

assign so_serial_data = (state && ((state&1))?serial_data[DATA_WIDTH]:0;
assign o_done = (state == DONE)?1:0;
assign o_serial_clk = (state)?serial_clk:0;

always @(posedge i_clk or posedge i_reset) begin

	if (reset_reset) begin
		state <= IDLE;
		serial_data <= 0;
	end

	if (i_start && !i_reset) begin
		state <= START;
		serial_data <= { 1'b0, i_data };
		serial_clk <= 0;
	end

	if (state) begin
		if ((serial_clk == 0) && (state & 1)) begin
			serial_clk <=~serial_clk;
			serial_data <= { serial_data[DATA_WIDTH-1:1], 1'b0};
		
		end
		else if ((serial_clk == 0) && ~(state & 1)) begin
			serial_clk <=~serial_clk;
			
		end
		
	end

end

endmodule
